#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative 'lexer.rex'

module RDL::Type

class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 148)

def initialize()
  @yydebug = true
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    20,    69,    18,    19,    68,    21,    28,    30,    13,    15,
    62,    11,    63,    16,    56,    17,    37,    31,    32,    20,
    64,    18,    19,    65,    21,    28,    30,    13,    15,    37,
    11,    66,    16,    67,    17,    56,    31,    32,    20,    59,
    18,    19,    70,    21,    71,    14,    13,    15,    72,    11,
    73,    16,    75,    17,    20,    80,    18,    19,    55,    21,
    38,    14,    13,    15,    54,    11,    82,    16,    20,    17,
    18,    19,    53,    21,    52,    14,    13,    15,    85,    11,
    51,    16,    20,    17,    18,    19,    37,    21,     7,    14,
    13,    15,    36,    11,    90,    16,    20,    17,    18,    19,
     7,    21,    34,    14,    13,    15,    93,    11,    94,    16,
    20,    17,    18,    19,     7,    21,    96,    14,    13,    15,
     8,     5,     6,    16,    20,    17,    18,    19,    98,    21,
   100,    14,    13,    15,     7,    11,    69,    16,    20,    17,
    18,    19,   nil,    21,   nil,    47,    13,    15,   nil,    11,
   nil,    16,    20,    17,    18,    19,   nil,    21,   nil,    14,
    13,    15,   nil,    11,   nil,    16,    20,    17,    18,    19,
   nil,    21,   nil,    14,    13,    15,   nil,   nil,   nil,    16,
    20,    17,    18,    19,   nil,    21,   nil,    14,    13,    15,
   nil,   nil,   nil,    16,    20,    17,    18,    19,   nil,    21,
   nil,    14,    13,    15,   nil,    11,   nil,    16,    20,    17,
    18,    19,   nil,    21,   nil,    14,    13,    15,   nil,   nil,
   nil,    16,    20,    17,    18,    19,   nil,    21,   nil,    14,
    13,    15,   nil,    11,   nil,    16,    20,    17,    18,    19,
   nil,    21,   nil,    14,    13,    15,   nil,   nil,   nil,    16,
    42,    17,    40,    41,   nil,   nil,    42,    38,    40,    41,
    43,     7,   nil,    38,   nil,   nil,    43 ]

racc_action_check = [
     7,    47,     7,     7,    46,     7,     7,     7,     7,     7,
    40,     7,    41,     7,    30,     7,    47,     7,     7,    53,
    42,    53,    53,    43,    53,    53,    53,    53,    53,    30,
    53,    44,    53,    45,    53,    38,    53,    53,    56,    35,
    56,    56,    48,    56,    49,    56,    56,    56,    50,    56,
    51,    56,    52,    56,    37,    56,    37,    37,    29,    37,
    55,    37,    37,    37,    27,    37,    61,    37,    80,    37,
    80,    80,    26,    80,    23,    80,    80,    80,    64,    80,
    20,    80,    11,    80,    11,    11,    14,    11,    69,    11,
    11,    11,    12,    11,    74,    11,    70,    11,    70,    70,
    75,    70,     8,    70,    70,    70,    85,    70,    88,    70,
    36,    70,    36,    36,     6,    36,    91,    36,    36,    36,
     1,     0,     0,    36,    90,    36,    90,    90,    94,    90,
    95,    90,    90,    90,     0,    90,    98,    90,    17,    90,
    17,    17,   nil,    17,   nil,    17,    17,    17,   nil,    17,
   nil,    17,    32,    17,    32,    32,   nil,    32,   nil,    32,
    32,    32,   nil,    32,   nil,    32,    63,    32,    63,    63,
   nil,    63,   nil,    63,    63,    63,   nil,   nil,   nil,    63,
    62,    63,    62,    62,   nil,    62,   nil,    62,    62,    62,
   nil,   nil,   nil,    62,     5,    62,     5,     5,   nil,     5,
   nil,     5,     5,     5,   nil,     5,   nil,     5,    93,     5,
    93,    93,   nil,    93,   nil,    93,    93,    93,   nil,   nil,
   nil,    93,    31,    93,    31,    31,   nil,    31,   nil,    31,
    31,    31,   nil,    31,   nil,    31,    65,    31,    65,    65,
   nil,    65,   nil,    65,    65,    65,   nil,   nil,   nil,    65,
    16,    65,    16,    16,   nil,   nil,    66,    16,    66,    66,
    16,    16,   nil,    66,   nil,   nil,    66 ]

racc_action_pointer = [
   116,   120,   nil,   nil,   nil,   187,    96,    -7,   102,   nil,
   nil,    75,    88,   nil,    60,   nil,   243,   131,   nil,   nil,
    66,   nil,   nil,    55,   nil,   nil,    70,    50,   nil,    56,
     3,   215,   145,   nil,   nil,    20,   103,    47,    24,   nil,
     2,     4,     6,    15,    29,    12,   -17,   -10,    40,    21,
    25,    29,    32,    12,   nil,    46,    31,   nil,   nil,   nil,
   nil,    39,   173,   159,    57,   229,   249,   nil,   nil,    70,
    89,   nil,   nil,   nil,    91,    82,   nil,   nil,   nil,   nil,
    61,   nil,   nil,   nil,   nil,    98,   nil,   nil,   106,   nil,
   117,    95,   nil,   201,   114,   116,   nil,   nil,   125,   nil,
   nil ]

racc_action_default = [
   -55,   -55,    -1,    -2,    -3,   -55,   -55,   -10,   -55,    -4,
   -29,   -55,   -41,   -43,   -44,   -45,   -33,   -55,   -51,   -52,
   -55,   -54,    -5,   -55,   -11,   -12,   -13,   -16,   -18,   -19,
   -44,   -55,   -55,   -24,   101,   -55,   -55,   -55,   -55,   -34,
   -55,   -55,   -55,   -55,   -39,   -55,   -55,   -44,   -31,   -55,
   -55,   -55,   -27,   -55,   -17,   -55,   -55,   -22,   -23,   -30,
   -42,   -55,   -55,   -55,   -55,   -55,   -33,   -47,   -50,   -55,
   -55,   -48,   -49,   -53,   -55,   -55,   -14,   -15,   -20,   -21,
   -55,   -26,   -46,   -35,   -36,   -55,   -38,   -40,    -8,   -32,
   -55,   -55,   -25,   -55,   -55,    -6,   -28,   -37,   -55,    -9,
    -7 ]

racc_goto_table = [
     9,    50,    33,    60,     2,    49,    35,    39,    25,    46,
    22,    79,    23,    74,     4,    24,     3,     1,   nil,   nil,
    45,   nil,   nil,   nil,   nil,    61,    57,    58,   nil,    83,
    84,   nil,    86,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   nil,    81,   nil,   nil,    77,   nil,    78,    39,    89,    87,
    97,    76,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    88,   nil,    92,   nil,   nil,    99,    91,
   nil,   nil,   nil,   nil,   nil,    95 ]

racc_goto_check = [
     5,     8,     5,    15,     2,    16,     5,    13,    10,    18,
     2,    14,     6,     7,     4,     9,     3,     1,   nil,   nil,
     2,   nil,   nil,   nil,   nil,    16,     5,     5,   nil,    15,
    15,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,
   nil,     5,   nil,   nil,    10,   nil,    10,    13,    16,    18,
    15,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,     5,   nil,   nil,     8,     2,
   nil,   nil,   nil,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,    17,     4,    16,    14,    -5,     5,   -39,   -16,     8,
     1,   nil,   nil,    -9,   -45,   -33,   -12,   nil,    -7,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,
   nil,    26,    27,    29,   nil,    10,   nil,    44,   nil,    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 30, :_reduce_1,
  1, 30, :_reduce_2,
  1, 30, :_reduce_3,
  2, 32, :_reduce_4,
  2, 33, :_reduce_5,
  6, 31, :_reduce_6,
  7, 31, :_reduce_7,
  3, 37, :_reduce_8,
  5, 37, :_reduce_9,
  0, 35, :_reduce_10,
  1, 35, :_reduce_11,
  1, 35, :_reduce_12,
  1, 38, :_reduce_13,
  3, 38, :_reduce_14,
  3, 38, :_reduce_15,
  1, 40, :_reduce_16,
  2, 40, :_reduce_17,
  1, 40, :_reduce_18,
  1, 39, :_reduce_19,
  3, 39, :_reduce_20,
  3, 42, :_reduce_21,
  2, 41, :_reduce_22,
  2, 41, :_reduce_23,
  1, 41, :_reduce_24,
  2, 43, :_reduce_25,
  1, 43, :_reduce_26,
  0, 36, :_reduce_27,
  3, 36, :_reduce_28,
  1, 34, :_reduce_29,
  3, 34, :_reduce_30,
  1, 45, :_reduce_31,
  3, 45, :_reduce_32,
  0, 46, :_reduce_none,
  1, 46, :_reduce_34,
  3, 46, :_reduce_35,
  3, 46, :_reduce_36,
  5, 46, :_reduce_37,
  3, 46, :_reduce_38,
  1, 47, :_reduce_39,
  3, 47, :_reduce_40,
  1, 44, :_reduce_41,
  3, 44, :_reduce_42,
  1, 48, :_reduce_43,
  1, 48, :_reduce_44,
  1, 48, :_reduce_45,
  4, 48, :_reduce_46,
  3, 48, :_reduce_47,
  3, 48, :_reduce_48,
  3, 48, :_reduce_49,
  3, 48, :_reduce_50,
  1, 48, :_reduce_51,
  1, 48, :_reduce_52,
  3, 48, :_reduce_53,
  1, 48, :_reduce_54 ]

racc_reduce_n = 55

racc_shift_n = 101

racc_token_table = {
  false => 0,
  :error => 1,
  :COMMA => 2,
  :RARROW => 3,
  :OR => 4,
  :HASH_TYPE => 5,
  :HASH_QUERY => 6,
  :CONST_BEGIN => 7,
  :RASSOC => 8,
  :FIXNUM => 9,
  :FLOAT => 10,
  :COLON => 11,
  :DOT => 12,
  :DOTS => 13,
  :ID => 14,
  :SYMBOL => 15,
  :SPECIAL_ID => 16,
  :STRING => 17,
  :LPAREN => 18,
  :RPAREN => 19,
  :LBRACE => 20,
  :RBRACE => 21,
  :LBRACKET => 22,
  :RBRACKET => 23,
  :QUERY => 24,
  :STAR => 25,
  :LESS => 26,
  :GREATER => 27,
  :EOF => 28 }

racc_nt_base = 29

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "COMMA",
  "RARROW",
  "OR",
  "HASH_TYPE",
  "HASH_QUERY",
  "CONST_BEGIN",
  "RASSOC",
  "FIXNUM",
  "FLOAT",
  "COLON",
  "DOT",
  "DOTS",
  "ID",
  "SYMBOL",
  "SPECIAL_ID",
  "STRING",
  "LPAREN",
  "RPAREN",
  "LBRACE",
  "RBRACE",
  "LBRACKET",
  "RBRACKET",
  "QUERY",
  "STAR",
  "LESS",
  "GREATER",
  "EOF",
  "$start",
  "entry",
  "method_type",
  "bare_type",
  "query_type",
  "type_expr",
  "arg_list",
  "block",
  "method_sig_list",
  "nonempty_arg_list",
  "named_arg_list",
  "arg",
  "base_arg",
  "named_arg",
  "base_arg_query_only",
  "union_type",
  "type_expr_comma_list",
  "hash_expr",
  "hash_expr_comma_list",
  "single_type" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_4(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_5(val, _values, result)
     result = RDL::Type::MethodType.new val[1].args, val[1].block, val[1].ret 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_6(val, _values, result)
            result = RDL::Type::MethodType.new val[1], val[3], val[5]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_7(val, _values, result)
            result = RDL::Type::MethodType.new val[1], val[3], RDL::Type::AnnotatedArgType.new(val[6], val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_8(val, _values, result)
     result = [val[0].to_sym, val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_9(val, _values, result)
     result = [val[0].to_sym, val[2]] + val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_10(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_12(val, _values, result)
          result = [RDL::Type::FiniteHashType.new(Hash[*val[0]])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_13(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_14(val, _values, result)
     result = val[2].unshift val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_15(val, _values, result)
     # named arg list must come last
      result = [val[0], RDL::Type::FiniteHashType.new(Hash[*val[2]])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_17(val, _values, result)
     result = RDL::Type::AnnotatedArgType.new(val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_18(val, _values, result)
     result = RDL::Type::DotsQuery.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_20(val, _values, result)
     result = val[0] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_21(val, _values, result)
     result = [val[0].to_sym, val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_22(val, _values, result)
     result = RDL::Type::OptionalType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_23(val, _values, result)
     result = RDL::Type::VarargType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_25(val, _values, result)
     result = RDL::Type::OptionalType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_27(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_28(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_30(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_31(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_32(val, _values, result)
     result = [val[0]] + val[2] 
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_35(val, _values, result)
     result = [val[0].to_i, val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_36(val, _values, result)
     result = [val[0].to_f, val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_37(val, _values, result)
        result = [Kernel.const_get(val[0]), val[2]]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_38(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_40(val, _values, result)
     result = val[0] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_42(val, _values, result)
     result = RDL::Type::UnionType.new val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_43(val, _values, result)
     result = RDL::Type::SingletonType.new(val[0].to_sym) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_44(val, _values, result)
          if val[0] == 'nil' then
        result = RDL::Type::NilType.new
      elsif val[0] =~ /^[a-z_]+\w*\'?/ then
        result = RDL::Type::VarType.new(val[0].to_sym)
      else
        result = RDL::Type::NominalType.new val[0]
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_45(val, _values, result)
          if $__rdl_special_types.has_key? val[0] then
        result = $__rdl_special_types[val[0]]
      else
        fail "Unexpected special type identifier #{val[0]}"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_46(val, _values, result)
          n = RDL::Type::NominalType.new(val[0])
      result = RDL::Type::GenericType.new(n, *val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_47(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_48(val, _values, result)
          result = RDL::Type::TupleType.new(*val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_49(val, _values, result)
          result = RDL::Type::StructuralType.new(Hash[*val[1]])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_50(val, _values, result)
          result = RDL::Type::FiniteHashType.new(Hash[*val[1]])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_51(val, _values, result)
     result = RDL::Type::SingletonType.new(val[0].to_i) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_52(val, _values, result)
     result = RDL::Type::SingletonType.new(val[0].to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_53(val, _values, result)
          result =  RDL::Type::SingletonType.new(Kernel.const_get(val[1]))
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_54(val, _values, result)
     result = RDL::Type::WildQuery.new 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser


end
